<?php

namespace App\Http\Controllers;

use App\Models\Sales;
use App\Models\SalesDetail;
use App\Models\Barang;
use App\Models\Customer; // Pastikan Anda mengimpor model Customer
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;

class SalesController extends Controller
{
    public function index(Request $request)
    {
        $search = $request->input('search', '');
        $perPage = 10;

        // Ambil halaman saat ini dari request
        $page = $request->input('page', 1);
        $offset = ($page - 1) * $perPage;

        // Ambil data transaksi dengan pencarian
        $query = Sales::with('customer')
            ->where('kode', 'LIKE', "%{$search}%")
            ->orWhereHas('customer', function ($query) use ($search) {
                $query->where('name', 'LIKE', "%{$search}%");
            });

        // Hitung total item
        $total = $query->count();

        // Ambil data transaksi sesuai halaman
        $sales = $query->skip($offset)->take($perPage)->get();

        // Hitung total halaman
        $totalPages = ceil($total / $perPage);

        return view('sales.index', compact('sales', 'search', 'totalPages', 'page', 'perPage', 'total'));
    }


    public function create()
    {
        $customers = Customer::all();
        $barangs = Barang::all();
        $autoGeneratedKode = $this->generateAutoKode(); // Implementasikan generateKode sesuai kebutuhan Anda
        return view('sales.create', compact('customers', 'barangs', 'autoGeneratedKode'));
    }

    private function generateAutoKode()
    {
        // Example logic to generate an auto-incremented kode
        $latestSales = Sales::latest('id')->first();
        $latestKode = $latestSales ? $latestSales->kode : 'S000000';

        // Increment kode logic (make sure to adapt this to your needs)
        $newKode = 'S' . str_pad((int)substr($latestKode, 1) + 1, 6, '0', STR_PAD_LEFT);

        return $newKode;
    }

    public function store(Request $request)
    {

        try {
            // Validate
            $validated = $request->validate([
                'kode' => [
                    'required',
                    'string',
                    'max:15',
                    Rule::unique('t_sales'),
                ],
                'tgl' => 'required|date',
                'customer_kode' => 'required|string|max:10',
                'subtotal' => 'required|numeric|min:0',
                'diskon' => 'required|numeric|min:0',
                'ongkir' => 'required|numeric|min:0',
                'total_bayar' => 'required|numeric|min:0',
                'details.*.barang_id' => 'required|exists:m_barang,kode',
                'details.*.harga_bandrol' => 'required|numeric|min:0',
                'details.*.qty' => 'required|integer|min:1',
                'details.*.diskon_pct' => 'nullable|numeric|min:0|max:100',
                'details.*.diskon_nilai' => 'nullable|numeric|min:0',
                'details.*.harga_diskon' => 'required|numeric|min:0',
                'details.*.total' => 'required|numeric|min:0',
            ]);

            // Check if customer exists
            $customer = Customer::where('kode', $validated['customer_kode'])->first();
            if (!$customer) {
                return redirect()->back()->withErrors(['customer_kode' => 'Customer not found.'])->withInput();
            }
            $cust_id = $customer->id;

            // Create the transaction
            $sales = Sales::create([
                'kode' => $validated['kode'],
                'tgl' => $validated['tgl'],
                'cust_id' => $cust_id,
                'subtotal' => $validated['subtotal'],
                'diskon' => $validated['diskon'],
                'ongkir' => $validated['ongkir'],
                'total_bayar' => $validated['total_bayar'],
            ]);

            foreach ($validated['details'] as $detail) {
                // Find the barang by kode
                $barang = Barang::where('kode', $detail['barang_id'])->first();
                if (!$barang) {
                    return redirect()->back()->withErrors(['details' => ['Barang with code ' . $detail['barang_id'] . ' not found.']])->withInput();
                }

                // Create the detail entry
                $sales->details()->create([
                    'barang_id' => $barang->id,
                    'harga_bandrol' => (float) $detail['harga_bandrol'],
                    'qty' => (int) $detail['qty'],
                    'diskon_pct' => isset($detail['diskon_pct']) ? (float) $detail['diskon_pct'] : null,
                    'diskon_nilai' => isset($detail['diskon_nilai']) ? (float) $detail['diskon_nilai'] : null,
                    'harga_diskon' => (float) $detail['harga_diskon'],
                    'total' => (float) $detail['total'],
                ]);
            }

            return redirect()->route('sales.index')->with('success', 'Transaksi berhasil disimpan.');
        } catch (\Illuminate\Validation\ValidationException $e) {
            // Log the validation error
            \Log::error('Validation failed: ', $e->errors());

            // Redirect with error messages
            return redirect()->back()->withErrors($e->errors())->withInput();
        } catch (\Exception $e) {
            // Log the general error
            \Log::error('Error saving sales data: ' . $e->getMessage());

            // Redirect with general error message
            return redirect()->back()->with('error', 'Terjadi kesalahan saat menyimpan transaksi.');
        }
    }

    public function show($id)
    {
        $salesdata = Sales::with('details')->find($id);

        if (!$salesdata) {
            abort(404, 'Transaction not found.');
        }

        return view('sales.show', compact('salesdata'));
    }


    // public function update(Request $request, $id)
    // {
    //     try {
    //         // Validate
    //         $validated = $request->validate([
    //             'kode' => [
    //                 'required',
    //                 'string',
    //                 'max:15',
    //                 Rule::unique('t_sales')->ignore($id),
    //             ],
    //             'tgl' => 'required|date',
    //             'customer_kode' => 'required|string|max:10',
    //             'subtotal' => 'required|numeric|min:0',
    //             'diskon' => 'required|numeric|min:0',
    //             'ongkir' => 'required|numeric|min:0',
    //             'total_bayar' => 'required|numeric|min:0',
    //             'details.*.barang_id' => 'required|exists:m_barang,kode',
    //             'details.*.harga_bandrol' => 'required|numeric|min:0',
    //             'details.*.qty' => 'required|integer|min:1',
    //             'details.*.diskon_pct' => 'nullable|numeric|min:0|max:100',
    //             'details.*.diskon_nilai' => 'nullable|numeric|min:0',
    //             'details.*.harga_diskon' => 'required|numeric|min:0',
    //             'details.*.total' => 'required|numeric|min:0',
    //         ]);

    //         // Check if customer exists
    //         $customer = Customer::where('kode', $validated['customer_kode'])->first();
    //         if (!$customer) {
    //             return redirect()->back()->withErrors(['customer_kode' => 'Customer not found.'])->withInput();
    //         }
    //         $cust_id = $customer->id;

    //         // Update the transaction
    //         $sales = Sales::findOrFail($id);
    //         $sales->update([
    //             'kode' => $validated['kode'],
    //             'tgl' => $validated['tgl'],
    //             'cust_id' => $cust_id,
    //             'subtotal' => $validated['subtotal'],
    //             'diskon' => $validated['diskon'],
    //             'ongkir' => $validated['ongkir'],
    //             'total_bayar' => $validated['total_bayar'],
    //         ]);

    //         // Update details
    //         $sales->details()->delete(); // Delete existing details

    //         foreach ($validated['details'] as $detail) {
    //             // Find the barang by kode
    //             $barang = Barang::where('kode', $detail['barang_id'])->first();
    //             if (!$barang) {
    //                 return redirect()->back()->withErrors(['details' => ['Barang with code ' . $detail['barang_id'] . ' not found.']])->withInput();
    //             }

    //             // Create the detail entry
    //             $sales->details()->create([
    //                 'barang_id' => $barang->id,
    //                 'harga_bandrol' => (float) $detail['harga_bandrol'],
    //                 'qty' => (int) $detail['qty'],
    //                 'diskon_pct' => isset($detail['diskon_pct']) ? (float) $detail['diskon_pct'] : null,
    //                 'diskon_nilai' => isset($detail['diskon_nilai']) ? (float) $detail['diskon_nilai'] : null,
    //                 'harga_diskon' => (float) $detail['harga_diskon'],
    //                 'total' => (float) $detail['total'],
    //             ]);
    //         }

    //         return redirect()->route('sales.index')->with('success', 'Transaksi berhasil diperbarui.');
    //     } catch (\Illuminate\Validation\ValidationException $e) {
    //         // Log the validation error
    //         \Log::error('Validation failed: ', $e->errors());

    //         // Redirect with error messages
    //         return redirect()->back()->withErrors($e->errors())->withInput();
    //     } catch (\Exception $e) {
    //         // Log the general error
    //         \Log::error('Error updating sales data: ' . $e->getMessage());

    //         // Redirect with general error message
    //         return redirect()->back()->with('error', 'Terjadi kesalahan saat memperbarui transaksi.');
    //     }
    // }

    public function destroy($id)
    {
        $sales = Sales::find($id);

        if (!$sales) {
            return redirect()->route('sales.index')->with('error', 'Transaksi tidak ditemukan.');
        }

        $sales->details()->delete();

        $sales->delete();

        return redirect()->route('sales.index')->with('success', 'Transaksi berhasil dihapus.');
    }
}
